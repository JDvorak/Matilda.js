{"name":"Matilda.js","tagline":"Matilda.js v0.0.1 -- Webscale Inference Toolkit","body":"# Matilda.js\r\nv0.0.2\r\n=======\r\n\r\n\r\nMatilda is a webscale inference toolkit. \r\n\r\nThis Javascript library makes it easy to perform inference on statistical topic models anywhere.\r\nAt present, Matilda performs Latent Dirichlet Allocation by way of Markov Chain Monte Carlo (MCMC).\r\n\r\n## Supported Techniques\r\n* Latent Dirichlet Allocation\r\n  - Sparse Gibbs Sampling\r\n\r\n## Project Maturity\r\nThis project is alpha. \r\nThis is __not__ a production library. Do not rely on it.\r\nThe interface and functionality will change drastically from week to week.  \r\n__Proceed at your own risk.__\r\n\r\n## Dependencies\r\nThis is a standalone library. \r\n\r\n## Usage\r\n\r\nMatilda is a fluently structured toolkit styled after d3.js. \r\n\r\n#### Step 1. Instantiate a Model\r\nThe basic unit of Matilda is a Matilda model.\r\n\r\n      var mM = new Matilda.Model();\r\n\r\n#### Step 2. Add Documents\r\n\r\nTo train a Matilda model, you must first addDocuments. \r\nThe method addDocuments takes an array of words.\r\nBut they need not be strings. \r\nA Matilda model is representation agnostic.\r\nSo long as they are in an array everything will work out.\r\nAll the items in the array are are the features that the model will be trained on.\r\n\r\n    mM.addDocument(['Matilda','said','Never','do','anything','by','halves',\r\n                    'if','you','want','to','get','away','with','it',\r\n                    'Be','outrageous','Go','the','whole','hog','Make',\r\n                    'sure','everything','you','do','is','so','completely',\r\n                    'crazy','it','s','unbelievable']);    \r\n    \r\n    mM.addDocument(['When','the','earlier','Infantry','Tank','Mark','I',\r\n                    'which','was','also','known','as','Matilda','was',\r\n                    'removed','from','service','the','Infantry',\r\n                    'Tank','Mk','II','became','known','simply','as','the','Matilda' ]);\r\n    \r\n    mM.addDocument(['When','war','was','recognised','as','imminent','production','of','the',\r\n                    'Matilda','II','was','ordered','and','that','of','the','Matilda',\r\n                    'I','curtailed','The','first','order','was','placed','shortly','after',\r\n                    'trials','were','completed','with','140','ordered','from','Vulcan',\r\n                    'Foundry','in','mid','1938' ]);\r\n\r\n    mM.addDocument([ 'So','Matilda','s','strong','young','mind','continued','to',\r\n                    'grow','nurtured','by','the','voices',\r\n                    'of','all','those','authors','who',\r\n                    'had','sent','their','books','out',\r\n                    'into','the','world','like','ships','on','the','sea',\r\n                    'These','books','gave','Matilda','a','hopeful',\r\n                    'and','comforting','message','You','are','not','alone' ]);\r\n\r\nBut a model can also take an array of arrays.\r\n\r\n    var document3 = ['Matilda','said','Never','do','anything','by','halves',\r\n                    'if','you','want','to','get','away','with','it',\r\n                    'Be','outrageous','Go','the','whole','hog','Make',\r\n                    'sure','everything','you','do','is','so','completely',\r\n                    'crazy','it','s','unbelievable'];   \r\n\r\n    mM.addDocument([document1, document2, document3]])  \r\n\r\nCallbacks are also supported.\r\n\r\nWhen sending multiple documents via addDocument, the callback is run after\r\nevery individual document is inserted into the object.\r\nThe callback receives an object containing model data, and the current document\r\n\r\n    var arrayOfArrays = [document1, document2, document3]\r\n\r\n    mM.addDocument(arrayOfArrays, \r\n                    function(dataObject, curDoc) {\r\n                      console.log(dataObject.vocab);\r\n                      console.log(dataObject.topics);\r\n                      console.log(dataObject.documents);\r\n                    });\r\n\r\nFor natural word pre-processing [NaturalNode](https://github.com/NaturalNode/natural) is highly recommended.\r\n\r\n#### Step 3. Train\r\n\r\nNow that the documents have been added, you can train your model.\r\nBy default models are set to five topics.\r\nYou can overide this defaults by using the setNumberOfTopics method.\r\n\r\n    mM.setNumberOfTopics(3);\r\n\r\nIt looks like everything is good to go. \r\nTime to train.\r\nTrain is a method which takes a number which represents the number of iterations.\r\nIt is recommended that at least 50 iterations be made, but for this simple example 5 will do. \r\n\r\n    mM.train(5);\r\n\r\n__WARNING:__ Do not call setNumberOfTopics after training. \r\nSetting the Model's Topic Count _after_ training will erase all training.\r\n\r\nThe train method also takes a callback which is called after every iteration of the training. \r\nThe callback receives an object containing the topics, vocabulary, and document data of the model.\r\n\r\n    mM.train(5, function(modelData){ \r\n      console.log(modelData.vocab);\r\n      console.log(modelData.topics);\r\n      console.log(modelData.documents);\r\n    });\r\n\r\n#### Step 4. Enjoy\r\n\r\nThere are a number of features that can be drawn from the training.\r\nA Topic by Topic matrix of correlations may be obtained by calling the topicCorrelations method. \r\n\r\n    mM.topicCorrelations();\r\n\r\nYou can get back the documents containing their respective features, and their topic proportions.\r\n\r\n    mM.getDocuments();\r\n\r\nYou can get an object containing all the Topics, and their words. \r\n\r\n    mM.getTopics();\r\n\r\nYou can even look over the words themselves and their topic memberships.\r\n\r\n    mM.getVocabulary();\r\n\r\nBut maybe you want your data more structured. \r\nYou can get back your words organized by topic, and sorted by frequency.\r\n\r\n    mM.getWordsByTopics();\r\n\r\nOr maybe you need to organize your documents by similarity. \r\nJust call getSimilarDocuments and pass in one of the documents you've already added to the collection. \r\nIn return you'll see all the documents similar to it.\r\n\r\n    mM.getSimilarDocuments(docIndex);\r\n\r\n#### Step 5. Mix and Match\r\n\r\nMatilda has been made as modular and unopinionated as possible, and works well with Node libraries and client-side libraries alike.\r\n\r\nCombine Matilda with MongoDB and maintain an index of entries sorted by topical similarity. \r\nMix mM.topicCorrelations() with a static blogging engine and compose a topical map of your blog every regeneration.\r\nPlug in the Google Analytics API and cluster your customers by behavioral traits.\r\nMatch it with an email service and fight spam in a whole new way, or just organize your inbox by subject.\r\nFeed your forum into a Matilda Model and find out what your community is talking about.\r\n\r\nAnd that's just the beginning. \r\n\r\nThere are big plans.\r\n\r\n### Where is α and β?\r\n\r\nThe smoothing factors of LDA are at present automated.\r\n\r\n### Subscribe to our Newsletter!\r\n\r\nKeep up to date. Get the latest news on the next big thing delivered to your inbox. \r\n<a href=\"http://eepurl.com/yWEqf\">Subscribe to our newsletter</a>\r\n\r\n\r\n## Roadmap\r\n* v0.0.3\r\n  - File System Support\r\n* v0.0.4\r\n  - Convert to Belief Propagation\r\n  - Online Fast Belief Propagation\r\n* v0.0.5\r\n  - Correlated Topic Model (CTM)\r\n  - Relational Topic Model (RTM)\r\n  - Author Topic Model (ATM)\r\n  - Topic User Community Model (TUCM)\r\n* v0.1.0\r\n  - Hierarchical Pitman–Yor\r\n  - Pachinko Allocation\r\n* v0.2.0\r\n  - Named Entity Recognition\r\n  - Grasshopper\r\n\r\n\r\n## Acknowledgements\r\nMatilda.js is based on [LDAjs](https://github.com/mimno/jsLDA), [Gensim](http://radimrehurek.com/gensim/), and [Mallet](http://mallet.cs.umass.edu/), and inspired by the works of [David Mimno](http://www.cs.princeton.edu/~mimno/), [Ted Underwood](http://tedunderwood.com/), [David Blei](http://www.cs.princeton.edu/~blei/), [Roald Dahl](http://www.roalddahl.com/), and [Sir John Carden](http://www.tankmuseum.org/ixbin/indexplus?_IXSS_=_IXMENU_%3dVehicles%26ALL%3dmatilda%26_IXACTION_%3dsummary%26%252asform%3d%252fsearch_form%252fbovtm_combined%26_IXSESSION_%3d3N23FDeXD_4%26TYPE%3darticle%26_IXFPFX_%3dtemplates%252fsummary%252f&_IXFIRST_=12&_IXSPFX_=templates/full/tvod/t&_IXMAXHITS_=1&submit-button=summary&_IXSESSION_=3N23FDeXD_4&_IXMENU_=Vehicles).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}